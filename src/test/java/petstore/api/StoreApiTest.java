/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package petstore.api;

import io.restassured.filter.log.LogDetail;
import org.apache.commons.lang3.RandomStringUtils;
import org.junit.jupiter.api.Assertions;
import petstore.model.ModelApiResponse;
import petstore.model.Order;
import petstore.ApiClient;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import java.time.OffsetDateTime;
import java.util.*;

import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static petstore.GsonObjectMapper.gson;

/**
 * API tests for StoreApi
 */

public class StoreApiTest {

    private StoreApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().log(LogDetail.ALL).setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://petstore.swagger.io/v2"))).store();
    }

    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee405AfterDeleteOrder() {
         api.deleteOrder().orderIdPath("").execute(r -> r.prettyPeek()).then().statusCode(405);
    }

    /**
     * Order not found
     */
    @Test
    public void shouldSee404AfterDeleteOrder() {
        api.deleteOrder().orderIdPath(new Random().nextLong()).execute(r -> r.prettyPeek()).then().statusCode(404);
    }

    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterDeleteOrder() {
        Long orderId = api.placeOrder().body(generateRandomOrderBody()).execute().as(Order.class).getId();
        takePause(3000);
        ModelApiResponse modelApiResponse = api.deleteOrder().orderIdPath(orderId).execute(r -> r.prettyPeek())
                .as(ModelApiResponse.class);
        Assertions.assertEquals(orderId.toString(), modelApiResponse.getMessage());
        Assertions.assertEquals(200, modelApiResponse.getCode());
    }

    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterGetInventory() {
        Assertions.assertFalse(api.getInventory().execute(r -> r.prettyPeek()).getBody().jsonPath()
                .getString("available").isEmpty());
    }

    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterGetOrderById() {
        Order expectedOrder = api.placeOrder().body(generateRandomOrderBody()).execute().as(Order.class);;
        Order actualOrder = api.getOrderById().orderIdPath(expectedOrder.getId()).execute(r -> r.prettyPeek()).as(Order.class);
        Assertions.assertEquals(expectedOrder, actualOrder);
    }

    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee404AfterGetOrderById() {
        api.getOrderById().orderIdPath(new Random().nextLong()).execute(r -> r.prettyPeek()).then().statusCode(404);
    }

    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterPlaceOrder() {
        Order expectedOrder = generateRandomOrderBody();
        Order actualOrder = api.placeOrder().body(expectedOrder).execute(r -> r.prettyPeek()).as(Order.class);
        expectedOrder.setId(actualOrder.getId());
        Assertions.assertEquals(expectedOrder, actualOrder);
    }

    private Order generateRandomOrderBody() {
        return new Order()
                .id(new Random().nextLong())
                .petId(new Random().nextLong())
                .status(Order.StatusEnum.APPROVED)
                .complete(true)
                .quantity(0)
                .shipDate(OffsetDateTime.parse("2021-07-22T18:21:10.129Z"));
    }

    private void takePause(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}